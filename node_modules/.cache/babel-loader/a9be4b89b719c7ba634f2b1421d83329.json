{"ast":null,"code":"import mockData from \"../mock-data.json\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"./context\";\nconst TRANSACTIONS_PER_PAGE = 5;\nlet data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nconst {\n  cache\n} = useContext(AppContext);\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = 0;\n  const end = start + (page + 1) * TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  let transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n  console.log(\"updated transactions: \", data.transactions);\n  cache === null || cache === void 0 ? void 0 : cache.current.set(`${setTransactionApproval}`, JSON.stringify(data.transactions));\n};","map":{"version":3,"names":["mockData","useContext","AppContext","TRANSACTIONS_PER_PAGE","data","employees","transactions","cache","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved","console","log","current","set","JSON","stringify"],"sources":["C:/Users/liuju/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\nimport { useContext } from \"react\";\nimport { AppContext } from \"./context\";\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nlet data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nconst { cache } = useContext(AppContext)\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = 0\n  const end = start + (page + 1) * TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  let transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n  \n  console.log(\"updated transactions: \", data.transactions)\n  cache?.current.set(`${setTransactionApproval}`, JSON.stringify(data.transactions))\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,IAAIC,IAA4D,GAAG;EACjEC,SAAS,EAAEL,QAAQ,CAACK,SAD6C;EAEjEC,YAAY,EAAEN,QAAQ,CAACM;AAF0C,CAAnE;AAKA,MAAM;EAAEC;AAAF,IAAYN,UAAU,CAACC,UAAD,CAA5B;AAEA,OAAO,MAAMM,YAAY,GAAG,MAAkBJ,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMI,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAG,CAAd;EACA,MAAMC,GAAG,GAAGD,KAAK,GAAG,CAACF,IAAI,GAAG,CAAR,IAAaP,qBAAjC;;EAEA,IAAIS,KAAK,GAAGR,IAAI,CAACE,YAAL,CAAkBQ,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGT,IAAI,CAACE,YAAL,CAAkBQ,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELX,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBU,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAOP,IAAI,CAACE,YAAL,CAAkBa,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,IAAIL,WAAW,GAAGhB,IAAI,CAACE,YAAL,CAAkBoB,IAAlB,CACfC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADlC,CAAlB;;EAIA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDS,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;EAEAI,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC1B,IAAI,CAACE,YAA3C;EACAC,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEwB,OAAP,CAAeC,GAAf,CAAoB,GAAET,sBAAuB,EAA7C,EAAgDU,IAAI,CAACC,SAAL,CAAe9B,IAAI,CAACE,YAApB,CAAhD;AACD,CAbM"},"metadata":{},"sourceType":"module"}